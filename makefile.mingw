OPT_FLAGS = -O3 -ffast-math 
CXXFLAGS = -Wall -fexceptions $(OPT_FLAGS) -DdDOUBLE -DBYTE_ORDER=LITTLE_ENDIAN -DNEED_BCOPY -DLIBXML_STATIC -DMALLOC_H_NEEDED
CFLAGS = -Wall $(OPT_FLAGS)
LDFLAGS = $(OPT_FLAGS)
CC = gcc
CXX = g++

LIBS = $(HOME)/Unix/lib/libode.a -L$(HOME)/Unix/lib -lxml2 -lm -lwsock32
INC_DIRS = -Iode/include -I$(HOME)/Unix/include -I$(HOME)/Unix/include/libxml2

# vpath %.cpp src
# vpath %.c src 

GAITSYMSRC = \
AMotorJoint.cpp                 Driver.cpp                      FacetedSphere.cpp               NPointStrap.cpp                 TIFFWrite.cpp\
BallJoint.cpp                   Environment.cpp                 FixedJoint.cpp                  NamedObject.cpp                 ThreePointStrap.cpp\
Body.cpp                        ErrorHandler.cpp                FloatingHingeJoint.cpp          ObjectiveMain.cpp               TorqueReporter.cpp\
CappedCylinderGeom.cpp          ExpressionFolder.cpp            GLUIRoutines.cpp                OpenCLRoutines.cpp              TrimeshGeom.cpp\
Contact.cpp                     ExpressionFunTransform3D.cpp    GLUtils.cpp                     PIDMuscleLength.cpp             TwoPointStrap.cpp\
Controller.cpp                  ExpressionMat.cpp               Geom.cpp                        PlaneGeom.cpp                   UDP.cpp\
CyclicDriver.cpp                ExpressionParser.cpp            HingeJoint.cpp                  PositionReporter.cpp            UGMMuscle.cpp\
CylinderWrapStrap.cpp           ExpressionRef.cpp               IrrlichtRoutines.cpp            RayGeom.cpp                     UniversalJoint.cpp\
DampedSpringMuscle.cpp          ExpressionVar.cpp               Joint.cpp                       Reporter.cpp                    Util.cpp\
DataFile.cpp                    ExpressionVec.cpp               MAMuscle.cpp                    Simulation.cpp                  XMLConverter.cpp\
DataTarget.cpp                  Face.cpp                        MAMuscleComplete.cpp            SphereGeom.cpp                  fec.cpp\
DataTargetQuaternion.cpp        FacetedCappedCylinder.cpp       MAMuscleExtended.cpp            StepDriver.cpp                  SwingClearanceAbortReporter.cpp\
DataTargetScalar.cpp            FacetedConicSegment.cpp         MAMuscleExtendedDamped.cpp      Strap.cpp\
DataTargetVector.cpp            FacetedObject.cpp               Marker.cpp                      StrokeFont.cpp\
Drivable.cpp                    FacetedPolyline.cpp             Muscle.cpp                      TCP.cpp

GAITSYMOBJ = $(addsuffix .o, $(basename $(GAITSYMSRC) ) )

GAITSYMHEADER = \
AMotorJoint.h                   Face.h                          PIDMuscleLength.h\
BallJoint.h                     FacetedCappedCylinder.h         PlaneGeom.h\
Body.h                          FacetedConicSegment.h           PositionReporter.h\
CappedCylinderGeom.h            FacetedObject.h                 RayGeom.h\
Contact.h                       FacetedPolyline.h               Reporter.h\
Controller.h                    FacetedSphere.h                 SimpleStrap.h\
CyclicDriver.h                  FixedJoint.h                    Simulation.h\
CylinderWrapStrap.h             FloatingHingeJoint.h            SocketMessages.h\
DampedSpringMuscle.h            GLUIRoutines.h                  SphereGeom.h\
DataFile.h                      GLUtils.h                       StepDriver.h\
DataTarget.h                    Geom.h                          Strap.h\
DataTargetQuaternion.h          HingeJoint.h                    StrokeFont.h\
DataTargetScalar.h              IrrlichtRoutines.h              TCP.h\
DataTargetVector.h              Joint.h                         TIFFWrite.h\
DebugControl.h                  MAMuscle.h                      ThreePointStrap.h\
Drivable.h                      MAMuscleComplete.h              TorqueReporter.h\
Driver.h                        MAMuscleExtended.h              TrimeshGeom.h\
Environment.h                   MAMuscleExtendedDamped.h        TwoPointStrap.h\
ErrorHandler.h                  MPIStuff.h                      UDP.h\
ExpressionFolder.h              Marker.h                        UGMMuscle.h\
ExpressionFunTransform3D.h      Muscle.h                        UniversalJoint.h\
ExpressionMat.h                 NPointStrap.h                   Util.h\
ExpressionParser.h              NamedObject.h                   XMLConverter.h\
ExpressionRef.h                 ObjectiveMain.h                 fec.h\
ExpressionVar.h                 OpenCLRoutines.h\
ExpressionVec.h                 PGDMath.h

BINARIES = bin/gaitsym 

BINARIES_NO_OPENGL = bin/gaitsym 

all: directories binaries 

no_opengl: directories binaries_no_opengl

directories: bin obj 

binaries: $(BINARIES)

binaries_no_opengl: $(BINARIES_NO_OPENGL)

obj: 
	-mkdir obj
	-mkdir obj/no_opengl
	-mkdir obj/opengl
	-mkdir obj/no_opengl_udp
	-mkdir obj/opengl_udp
	-mkdir obj/no_opengl_tcp
	-mkdir obj/opengl_tcp

bin:
	-mkdir bin
	 
obj/no_opengl/%.o : src/%.cpp
	$(CXX) $(CXXFLAGS) $(INC_DIRS)  -c $< -o $@

bin/gaitsym: $(addprefix obj/no_opengl/, $(GAITSYMOBJ) ) 
	$(CXX) $(LDFLAGS) -o $@ $^ $(LIBS)

obj/opengl/%.o : src/%.cpp
	$(CXX) -DUSE_OPENGL $(CXXFLAGS) $(INC_DIRS) $(OPENGL_INC)  -c $< -o $@

bin/gaitsym_opengl: $(addprefix obj/opengl/, $(GAITSYMOBJ) ) 
	$(CXX) $(LDFLAGS) -o $@ $^ $(OPENGL_LIBS) $(LIBS) 

obj/no_opengl_socket/%.o : src/%.cpp
	$(CXX) -DUSE_SOCKETS $(CXXFLAGS) $(INC_DIRS)  -c $< -o $@

bin/gaitsym_socket: $(addprefix obj/no_opengl_socket/, $(GAITSYMOBJ) ) 
	$(CXX) $(LDFLAGS) -o $@ $^ $(SOCKET_LIBS) $(LIBS)

obj/opengl_socket/%.o : src/%.cpp
	$(CXX) -DUSE_OPENGL -DUSE_SOCKETS $(CXXFLAGS) $(INC_DIRS) $(OPENGL_INC)  -c $< -o $@

bin/gaitsym_opengl_socket: $(addprefix obj/opengl_socket/, $(GAITSYMOBJ) ) 
	$(CXX) $(LDFLAGS) -o $@ $^ $(SOCKET_LIBS) $(OPENGL_LIBS) $(LIBS) 

obj/no_opengl_udp/%.o : src/%.cpp
	$(CXX) -DUSE_UDP $(CXXFLAGS) $(INC_DIRS)  -c $< -o $@

bin/gaitsym_udp: $(addprefix obj/no_opengl_udp/, $(GAITSYMOBJ) ) 
	$(CXX) $(LDFLAGS) -o $@ $^ $(UDP_LIBS) $(LIBS)

obj/opengl_udp/%.o : src/%.cpp
	$(CXX) -DUSE_OPENGL -DUSE_UDP $(CXXFLAGS) $(INC_DIRS) $(OPENGL_INC)  -c $< -o $@

bin/gaitsym_opengl_udp: $(addprefix obj/opengl_udp/, $(GAITSYMOBJ) ) 
	$(CXX) $(LDFLAGS) -o $@ $^ $(UDP_LIBS) $(OPENGL_LIBS) $(LIBS) 

obj/no_opengl_tcp/%.o : src/%.cpp
	$(CXX) -DUSE_TCP $(CXXFLAGS) $(INC_DIRS)  -c $< -o $@

bin/gaitsym_tcp: $(addprefix obj/no_opengl_tcp/, $(GAITSYMOBJ) ) 
	$(CXX) $(LDFLAGS) -o $@ $^ $(TCP_LIBS) $(LIBS)

obj/opengl_tcp/%.o : src/%.cpp
	$(CXX) -DUSE_OPENGL -DUSE_TCP $(CXXFLAGS) $(INC_DIRS) $(OPENGL_INC)  -c $< -o $@

bin/gaitsym_opengl_tcp: $(addprefix obj/opengl_tcp/, $(GAITSYMOBJ) ) 
	$(CXX) $(LDFLAGS) -o $@ $^ $(TCP_LIBS) $(OPENGL_LIBS) $(LIBS) 


clean:
	rm -rf obj bin
	rm -f *~ *.bak *.bck *.tmp *.o 
	rm -f ode/include/config.h ode/src/*~ ode/src/*.bak ode/src/*.bck ode/src/*.tmp ode/src/*.o 
	rm -rf distribution

superclean:
	rm -rf obj bin
	rm -f *~ *.bak *.bck *.tmp *.o 
	rm -rf project_builder/build project_builder/GaitSym.pbproj/*.pbxuser
	rm -rf distribution
	find . -name '.DS_Store' -exec rm -f {} \;
	find . -name '.gdb_history' -exec rm -f {} \;
	find . -name '.#*' -exec rm -f {} \;

distribution: distribution_dirs gaitsym_distribution

distribution_dirs:
	rm -rf distribution
	-mkdir distribution
	-mkdir distribution/src
	-mkdir distribution/src

gaitsym_distribution: $(addprefix distribution/src/, $(GAITSYMSRC)) $(addprefix distribution/src/, $(GAITSYMHEADER))

$(addprefix distribution/src/, $(GAITSYMSRC)):
	scripts/strip_ifdef.py EXPERIMENTAL $(addprefix src/, $(notdir $@)) $@ 

$(addprefix distribution/src/, $(GAITSYMHEADER)):
	scripts/strip_ifdef.py EXPERIMENTAL $(addprefix src/, $(notdir $@)) $@ 

